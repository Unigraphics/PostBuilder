## HEADER BLOCK START ##
##############################################################################
#                                                                            #
#  Copyright (c) 1998/1999/2000,                     Unigraphics Solutions.  #
#  Copyright (c) 2001/2002/2003/2004,                EDS/UGS PLM Solutions.  #
#  Copyright (c) 2004/2005/2006,                     UGS Coorporation.       #
#  Copyright (c) 2007/2008/2009/2010/2011/2012/2013/2014/2015/2016,          #
#                                                    SIEMENS PLM Softwares.  #
#                                                                            #
##############################################################################
#               P B _ C M D _ T O O L _ L I S T . T C L
##############################################################################
#
# This package of custom commands can be imported into a post to generate
# tool list data in the form of operator messages in the NC output file.
#
#=============================================================================
#
# The following commands are included in this file:
#
#   PB_CMD_create_tool_list
#     - This command should be placed in either the "Start of Program"
#       or the "End of Program" event marker to generate a tool list
#       in your NC file.
#
#       The Shop Doc template file "pb_post_tool_list.tpl" distributed with
#       Post Builder in the "POSTBUILD/pblib/misc" directory can be copied
#       to the "mach/resource/postprocessor" or "mach/resource/shop_docs" directory,
#       in case your UG runtime environment does not have access to the
#       Post Builder installation.
#
#       Accessing "pb_post_tool_list.tpl" in other location can also be accomplished
#       by changing the code below titled "Generate tool list data" in this proc.
#
#       The variable "mom_sys_tool_list_output_type" set in this proc allows you
#       to select the type of tool list to be generated.
#       The options are:
#
#         "ORDER_IN_USE"     - List tools used in the program in the order of operations.
#         "ALL_UNIQUE"       - List all unique tools once for each in the order of use.
#         "GROUP_BY_TYPE"    - List tools in groups of different tool types.
#
#       The desired tool list type can be set by changing the code below.
#       The default is set to "GROUP_BY_TYPE".
#
#
#   PB_CMD_init_tool_list
#     - This command will be executed automatically, when present in the post, at the
#       "Start of Program" to prepare for the tool list generation.
#
#       This command will add the shop doc event handlers to the post.
#       You may edit the proc MOM_TOOL_BODY to customize your tool list output.
#
#       Only the tools used in the program being post-processed will be listed.
#
#       In order to create the tool list, you MUST add the command
#       "PB_CMD_create_tool_list" to either the "Start of Program"
#       or the "End of Program" event marker depending on your need.
#
#       The Shop Doc template file "pb_post_tool_list.tpl" residing in the
#       "POSTBUILD/pblib/misc" directory is required for this service to work.
#       You may need to copy it to the "mach/resource/postprocessor"
#       or "mach/resource/shop_docs" directory, in case your UG runtime
#       environment does not have access to the Post Builder installation.
#
#
#   PB_CMD_save_active_oper_tool_data
#     - This command will be executed automatically, when present in the post,
#       in PB_CMD_create_tool_list command.
#
#       It will save the attributes of the tool & parameters of current operation
#       to be post-processed before the tool list is generated by Shop-Doc mechanism.
#
#       You may add any desired MOM variable to the list "mom_sys_oper_tool_attr_list"
#       taht will be restored automatically later in your post.
#
#
#   PB_CMD_restore_active_oper_tool_data
#     - This command will be executed automatically, when present in the post,
#       in PB_CMD_create_tool_list command.
#
#       It will restore the tool attributes & operation parameters specified in the
#       list "mom_sys_oper_tool_attr_list" before the generation of the tool list.
#       The data have been saved in proc PB_CMD_save_active_oper_tool_data.
#
#
#   PB_CMD_init_oper_tool_time
#     - This command will be executed automatically, when present in the post,
#       in the "Start of Path" marker to reset the machining time for each operation.
#
#
#   PB_CMD_set_oper_tool_time
#     - This command will be executed automatically, when present in the post,
#       in the "End of Path" marker to set the machining time accumulated on the tool
#       used by the operation.
#
#
#   ==> All custom commands in this file should be imported into the post.
#
#=============================================================================
## HEADER BLOCK END ##

##############################################################################



#=============================================================================
proc PB_CMD_init_tool_list {} {
#=============================================================================
#  This command will be executed automatically at the "Start of Program" to
#  prepare for the tool list generation.
#
#  This command will add the shop doc event handlers to the post.
#  You may edit the proc MOM_TOOL_BODY to customize your tool list output.
#
#  Only the tools used in the program being post-processed will be listed.
#
#  In order to create the tool list, you MUST add the command
#  PB_CMD_create_tool_list to either the "Start of Program"
#  or the "End of Program" event marker depending on where
#  the tool list is to be output in your NC code.
#
#  The Shop Doc template file "pb_post_tool_list.tpl" residing in the
#  "postbuild/pblib/misc" directory is required for this service to work.
#  You may need to copy it to the "mach/resource/postprocessor"
#  or "mach/resource/shop_docs" directory, in case your UG runtime
#  environment does not have access to the Post Builder installation.
#
#-------------------------------------------------------------
# 01-11-13 gsl - ir2209290 Add Tap case in MAP_TOOL_TYPE proc
#                to list tapping tool of hole-making operation
# Aug-02-2016 Shuai - Replace "mom_tool_length_adjust_register" with "mom_tracking_point_adjust_register" for LATHE tool
#                     to get the adjust register number of tool in proc MOM_TOOL_BODY.
#
# 

   global mom_sys_tool_list_initialized


uplevel #0 {

proc MOM_TOOL_BODY { } {
   global mom_tool_name
   global mom_tool_number
   global mom_tool_diameter
   global mom_tool_length
   global mom_tool_type
   global mom_template_subtype
   global mom_tool_point_angle
   global mom_tool_flute_length
   global mom_tool_length_adjust_register
   global mom_tracking_point_adjust_register
   global mom_tool_nose_radius
   global mom_tool_corner1_radius
   global mom_tool_flute_length
   global mom_tool_orientation
   global mom_sys_control_out mom_sys_control_in
   global cycle_program_name current_program_name
   global mom_sys_tool_stack

   global tool_data_buffer


  # Handle single operation case.
  # current_program_name will be blank when no group has been selected.

   if { [string length $current_program_name] != 0 } {
      set n1 [string toupper $cycle_program_name]
      set n2 [string toupper $current_program_name]
      if { [string compare $n1 $n2] && [string length $n1] != 0 } {
return
      }
   } else {

     # mom_sys_change_mach_operation_name is set in MOM_machine_mode
     # Use this variable to generate tool info for a single operation.

      global mom_sys_change_mach_operation_name mom_operation_name

      if [info exists mom_sys_change_mach_operation_name] {
         if { ![string match "$mom_operation_name" $mom_sys_change_mach_operation_name] } {
return
         }
      } else {
return
      }
   }
 

  #****************************
  # Collect various tool lists
  #****************************
   lappend mom_sys_tool_stack(IN_USE) $mom_tool_name

   set tool_type [MAP_TOOL_TYPE]

   if { [lsearch $mom_sys_tool_stack(ALL) $mom_tool_name] < 0 } {

      lappend mom_sys_tool_stack(ALL)         $mom_tool_name
      lappend mom_sys_tool_stack($tool_type)  $mom_tool_name
   }


  #*************************************************
  # Define data to be output for each tool per type
  #*************************************************
   set output ""

   set ci $mom_sys_control_in
   set co $mom_sys_control_out

   if { [string length $mom_template_subtype] == 0 } { set mom_template_subtype $mom_tool_type }

   set tool_name [string range $mom_tool_name 0 19]
   set template_subtype [string range $mom_template_subtype 0 19]

   switch $tool_type {

      "MILL" {


         set output [format "%-20s %-20s %-10.4f %-10.4f %-10.4f %-10d" \
                     $tool_name $template_subtype \
                     $mom_tool_diameter $mom_tool_corner1_radius \
                     $mom_tool_flute_length $mom_tool_length_adjust_register] 
      }

      "DRILL" {

         set mom_tool_point_angle [expr (180.0 / 3.14159) * $mom_tool_point_angle]
         set output [format "%-20s %-20s %-10.4f %-10.4f %-10.4f %-10d" \
                     $tool_name $template_subtype \
                     $mom_tool_diameter $mom_tool_point_angle \
                     $mom_tool_flute_length $mom_tool_length_adjust_register] 
      }

      "LATHE" {

         set pi [expr 2 * asin(1.0)]
         set tool_orient [expr (180. / 3.14159) * $mom_tool_orientation]
         set output [format "%-20s %-20s %-10.4f %-15.4f %-10d" \
                     $tool_name $template_subtype \
                     $mom_tool_nose_radius $tool_orient \
                     $mom_tracking_point_adjust_register] 
      }
   }


  #*******************************************************************************
  # Fetch tool time data from the post.
  # This info is only available when tool list is created at the end of a program.
  #*******************************************************************************
   global mom_sys_tool_list_output_type
   global mom_sys_tool_time
   global mom_operation_name

   set tool_time ""

   if [info exists mom_sys_tool_time] {

      switch $mom_sys_tool_list_output_type {
         "ORDER_IN_USE" {
           # Tool time per operations.
            set tool_time $mom_sys_tool_time($mom_tool_name,$mom_operation_name)
         }

         default {
           # Accumulate tool time from all operations using this tool.
            set tool_time 0
            if [info exists mom_sys_tool_time($mom_tool_name,oper_list)] {
               foreach oper $mom_sys_tool_time($mom_tool_name,oper_list) {
                  set tool_time [expr $tool_time + $mom_sys_tool_time($mom_tool_name,$oper)]
               }
            }
         }
      }
   }

   if { [string length $tool_time]  &&  $tool_time != 0 } {
      set tool_time [format "%-10.2f" $tool_time]
   }


  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Store data to be output or used in PB_CMD_create_tool_list.
  #
  # <Ex.>
  #  global mom_tool_number
  #   set tool_data_buffer($mom_tool_name,tool_number) $mom_tool_number
  #
  # If a BLOCK_TEMPLATE is used to output the data, the global varaibles
  # used in the expression of an Address need to be set accordingly
  # before "MOM_do_template" is called.
  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   set tool_data_buffer($mom_tool_name,output) "$co$output$tool_time$ci"
   set tool_data_buffer($mom_tool_name,type)   "$tool_type"
}


proc MOM_SETUP_HDR {} {
   global mom_sys_control_out mom_sys_control_in


  # Initialize various tool lists
   global mom_sys_tool_stack

   set mom_sys_tool_stack(IN_USE) [list]
   set mom_sys_tool_stack(ALL)    [list]
   set mom_sys_tool_stack(MILL)   [list]
   set mom_sys_tool_stack(DRILL)  [list]
   set mom_sys_tool_stack(LATHE)  [list]


   set ci $mom_sys_control_in
   set co $mom_sys_control_out


  #++++++++++++++++++++++++++++++++++++++++++
  # Define header to be output per tool type
  #++++++++++++++++++++++++++++++++++++++++++
   global tool_data_buffer

   set tool_desc   "DESCRIPTION"
   set tool_dia    "DIAMETER"
   set corner_rad  "COR RAD"
   set tip_ang     "TIP ANG"
   set flute_len   "FLUTE LEN"
   set adjust      "ADJ REG"
   set nose_dia    "NOSE RAD"
   set tool_orient "TOOL ORIENT"

  # Label title for tool time only when it exists.
   global mom_sys_tool_time
   if [info exists mom_sys_tool_time] {
      set mach_time   "MACH TIME"
   } else {
      set mach_time   ""
   }

     set tool_name   "DRILL"
     set output [format "%-20s %-20s %-10s %-10s %-10s %-9s %-10s" \
                         $tool_name $tool_desc \
                         $tool_dia $tip_ang $flute_len $adjust $mach_time] 

     set header [list]
     lappend header "$co                                                                                               $ci"
     lappend header "$co-----------------------------------------------------------------------------------------------$ci"
     lappend header "$co$output$ci"
     lappend header "$co-----------------------------------------------------------------------------------------------$ci"

   set tool_data_buffer(DRILL,header) [join $header \n]


     set tool_name   "MILL"
     set output [format "%-20s %-20s %-10s %-10s %-10s %-9s %-10s" \
                         $tool_name $tool_desc \
                         $tool_dia $corner_rad $flute_len $adjust $mach_time] 
     
     set header [list]
     lappend header "$co                                                                                               $ci"
     lappend header "$co-----------------------------------------------------------------------------------------------$ci"
     lappend header "$co$output$ci"
     lappend header "$co-----------------------------------------------------------------------------------------------$ci"

   set tool_data_buffer(MILL,header) [join $header \n]


     set tool_name   "LATHE"
     set output [format "%-20s %-20s %-10s %-15s %-9s %-10s" \
                         $tool_name $tool_desc $nose_dia $tool_orient $adjust $mach_time] 

     set header [list]
     lappend header "$co                                                                                               $ci"
     lappend header "$co-----------------------------------------------------------------------------------------------$ci"
     lappend header "$co$output$ci"
     lappend header "$co-----------------------------------------------------------------------------------------------$ci"

   set tool_data_buffer(LATHE,header) [join $header \n]
}


proc MOM_PROGRAMVIEW_HDR {} {}
proc MOM_SETUP_FTR {} {}


proc MOM_MEMBERS_HDR {} {
   global mom_sys_program_stack cycle_program_name
   global current_program_name

   lappend mom_sys_program_stack $cycle_program_name

   if { [lsearch $mom_sys_program_stack "$current_program_name"] >= 0 } {
      set cycle_program_name $current_program_name
   }
}


proc MOM_MEMBERS_FTR {} {
   global mom_sys_program_stack cycle_program_name
   global current_program_name

   set mom_sys_program_stack [lreplace $mom_sys_program_stack end end]
   set cycle_program_name [lindex $mom_sys_program_stack end]

   if { [lsearch $mom_sys_program_stack "$current_program_name"] >= 0 } {
      set cycle_program_name $current_program_name
   }
}


proc MOM_PROGRAM_BODY {} {
   global mom_object_name cycle_program_name

   set cycle_program_name $mom_object_name
}


proc MOM_SETUP_BODY {} {}
proc MOM_OPER_BODY  {} {}
proc MOM_TOOL_HDR   {} {}
proc MOM_TOOL_FTR   {} {}
proc MOM_PROGRAMVIEW_FTR {} {}


proc MAP_TOOL_TYPE { } {
   global mom_tool_type

   if {[string match "Milling*" $mom_tool_type]} {
      return "MILL"
   } elseif { [string match "Turning*" $mom_tool_type]} {
      return "LATHE"
   } elseif { [string match "Grooving*" $mom_tool_type]} {
      return "LATHE"
   } elseif { [string match "Threading*" $mom_tool_type]} {
      return "LATHE"
   } elseif { [string match "Drilling*" $mom_tool_type]} {
      return "DRILL"
   } elseif { [string match "Tap*" $mom_tool_type]} {
      return "DRILL"
   } else {
      return ""
   }
}


proc shop_doc_output_literal { line } {
   global tool_list_commentary list_file

   set line_list [split $line \n]

   foreach line $line_list {

      if [info exists tool_list_commentary] {
         puts $list_file $line
      } else {
         MOM_output_literal $line
      }

   }
}


} ;# uplevel


   set mom_sys_tool_list_initialized 1

} ;# PB_CMD_init_tool_list



#=============================================================================
proc PB_CMD_create_tool_list {} {
#=============================================================================
#  Place this custom command in either the start of program
#  or the end of program event marker to generate a tool list
#  in your NC file.
#
#  The Shop Doc template file "pb_post_tool_list.tpl" distributed with
#  Post Builder in "POSTBUILD/pblib/misc" directory can be copied
#  to the "mach/resource/postprocessor" or "mach/resource/shop_docs" directory,
#  in case that your UG runtime environment does not have access to the
#  Post Builder installation.
#
#  Accessing "pb_post_tool_list.tpl" in other location can also be accomplished
#  by changing the code below titled "Generate tool list data" in this proc.
#
#  The variable "mom_sys_tool_list_output_type" set in this proc allows you
#  to select the type of tool list to be generated.
#  The options are:
#
#    "ORDER_IN_USE"     - List tools used in the program in the order of operations.
#    "ALL_UNIQUE"       - List all unique tools once for each in the order of use.
#    "GROUP_BY_TYPE"    - List tools in groups of different tool types.
#
#  The desired tool list type can be set by changing the code below.
#  The default is set to "GROUP_BY_TYPE".
#

   global mom_sys_tool_list_initialized
   global mom_sys_tool_list_output_type


   if { ![info exists mom_sys_tool_list_initialized] || !$mom_sys_tool_list_initialized } {
      MOM_output_to_listing_device "proc PB_CMD_init_tool_list must be executed in the\
                                    Start of Program before PB_CMD_create_tool_list is called."
return
   }


  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # Set mom_sys_tool_list_output_type to the desired output fashion.
  #
  #   "ORDER_IN_USE"     - List tools used in the program in the order of operations.
  #   "ALL_UNIQUE"       - List all unique tools once for each in the order of use.
  #   "GROUP_BY_TYPE"    - List tools in groups of different tool types.
  #
  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # set mom_sys_tool_list_output_type "ORDER_IN_USE"
  # set mom_sys_tool_list_output_type "ALL_UNIQUE"
   set mom_sys_tool_list_output_type "GROUP_BY_TYPE"


   global mom_sys_control_out mom_sys_control_in
   global current_program_name
   global mom_tool_number mom_tool_length_adjust_register mom_tool_name


  #----------------------------------------------------------------------------
  # Save info for the currently active tool in the program being post-prcessed
  # before starting Shop Doc mechanism for tool list generation.
  #----------------------------------------------------------------------------
   if [llength [info commands PB_CMD_save_active_oper_tool_data] ] {
      PB_CMD_save_active_oper_tool_data
   }


  #-----------------------------------------------------------
  # Create tool list per selected top-level group.
  # Group name is set to blank if no group has been selected.
  #-----------------------------------------------------------
   global mom_parent_group_name

   if [info exists mom_parent_group_name] {
      set current_program_name $mom_parent_group_name
   } else {
      set current_program_name ""
   }


   set ci " "
   set co " "

   if [info exists mom_sys_control_in] { set ci $mom_sys_control_in }
   if [info exists mom_sys_control_out] { set co $mom_sys_control_out }


  #*************************
  # Generate tool list data
  #*************************
   set template_file pb_post_tool_list.tpl

   global tcl_platform
   if [string match "windows" $tcl_platform(platform)] {
      set pb_lib_misc_dir [MOM_ask_env_var UGII_BASE_DIR]\\postbuild\\pblib\\misc\\
   } else {
      set pb_lib_misc_dir [MOM_ask_env_var UGII_BASE_DIR]/postbuild/pblib/misc/
   }  

   set cam_post_dir     [MOM_ask_env_var UGII_CAM_POST_DIR]
   set cam_shop_doc_dir [MOM_ask_env_var UGII_CAM_SHOP_DOC_DIR]

   if { [file exists ${pb_lib_misc_dir}${template_file}] } {

      MOM_do_template_file ${pb_lib_misc_dir}${template_file}

   } elseif { [file exists ${cam_post_dir}${template_file}] } {

      MOM_do_template_file ${cam_post_dir}${template_file}

   } elseif { [file exists ${cam_shop_doc_dir}${template_file}] } {

      MOM_do_template_file ${cam_shop_doc_dir}${template_file}

   } else {

      MOM_output_to_listing_device \
         "ERROR : Template file $template_file is not found in the following directories:\
          \n\
          \n          $pb_lib_misc_dir\
          \n          $cam_post_dir\
          \n          $cam_shop_doc_dir\
          \n\
          \n        Tool list cannot be generated.\n"
return
   }



  #------------------
  # Tool list header
  #------------------
   shop_doc_output_literal "$co===============================================================================================$ci"
   shop_doc_output_literal "$co                                   T O O L   L I S T                                           $ci"
   shop_doc_output_literal "$co===============================================================================================$ci"
  

  #------------------
  # Output tool list
  #------------------
   global tool_data_buffer
   global mom_sys_tool_stack

   switch $mom_sys_tool_list_output_type {

      "ORDER_IN_USE" {
         set tool_list $mom_sys_tool_stack(IN_USE)
      }

      "GROUP_BY_TYPE" {
         set tool_list [concat $mom_sys_tool_stack(LATHE) \
                               $mom_sys_tool_stack(DRILL) \
                               $mom_sys_tool_stack(MILL)]
      }

      default {
         set tool_list $mom_sys_tool_stack(ALL)
      }
   }


   set prev_tool_type ""

   foreach tool $tool_list {

      set tool_type $tool_data_buffer($tool,type)

     # Output tool type header if it changes.
      if { ![string match "$tool_type" $prev_tool_type] } {
         if { [info exists tool_data_buffer($tool_type,header)] && \
              [string length $tool_data_buffer($tool_type,header)] != 0 } {
            shop_doc_output_literal "$tool_data_buffer($tool_type,header)"
         }
      }

      if [info exists tool_data_buffer($tool,output)] {
         shop_doc_output_literal "$tool_data_buffer($tool,output)"
      }
      set prev_tool_type $tool_type
   }



  #------------------
  # Tool list footer
  #------------------
   shop_doc_output_literal "$co===============================================================================================$ci"


  #-------------------------------------------------------------------------------
  # Restore info for the currently active tool in the program being post-prcessed.
  #-------------------------------------------------------------------------------
   if [llength [info commands PB_CMD_restore_active_oper_tool_data] ] {
      PB_CMD_restore_active_oper_tool_data
   }
}


#=============================================================================
proc PB_CMD_save_active_oper_tool_data {} {
#=============================================================================
#  This command saves the attributes of the tool used in the current operation
#  to be post-processed before the generation of the tool list.
#
#  This command will be executed automatically in PB_CMD_create_tool_list.
#
#  You may add any desired MOM variable to the list below to be restored
#  later in your post.
#
#-------------------------------------------------------------
# 04-30-13 gsl - Enhanced to handle array variables
# Aug-02-2016 Shuai - Add mom_tracking_point_adjust_register into mom_sys_oper_tool_attr_list
#

   global mom_sys_oper_tool_attr_list
   global mom_sys_oper_tool_attr_saved_arr


  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  # You may add any MOM variables that need to be retained for
  # the operation to the list below (using lappend command).
  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   set mom_sys_oper_tool_attr_list [list]

    lappend mom_sys_oper_tool_attr_list  mom_tool_number
    lappend mom_sys_oper_tool_attr_list  mom_tool_length_adjust_register
    lappend mom_sys_oper_tool_attr_list  mom_tool_name
    lappend mom_sys_oper_tool_attr_list  mom_operation_name
    lappend mom_sys_oper_tool_attr_list  mom_spindle_direction_control
    lappend mom_sys_oper_tool_attr_list  mom_tracking_point_adjust_register


   foreach mom_var $mom_sys_oper_tool_attr_list {
      global $mom_var
      if [info exists $mom_var] {
         if [array exists $mom_var] {
            set mom_sys_oper_tool_attr_saved_arr($mom_var) [array get $mom_var]
         } else {
            set mom_sys_oper_tool_attr_saved_arr($mom_var) [eval format %s $$mom_var]
         }
      }
   }
}


#=============================================================================
proc PB_CMD_restore_active_oper_tool_data {} {
#=============================================================================
#  This command restores the attributes of the tool used in the current operation
#  to be post-processed before the generation of the tool list.
#  The attributes have been saved in proc PB_CMD_save_active_oper_tool_data.
#
#  This command will be executed automatically in PB_CMD_create_tool_list.
#
#-------------------------------------------------------------
# 04-30-13 gsl - Enhanced to handle array variables
#

   global mom_sys_oper_tool_attr_list
   global mom_sys_oper_tool_attr_saved_arr

   foreach mom_var $mom_sys_oper_tool_attr_list {
      global $mom_var
      if [info exists mom_sys_oper_tool_attr_saved_arr($mom_var)] {
         if [array exists $mom_var] {
           array set $mom_var $mom_sys_oper_tool_attr_saved_arr($mom_var)
         } else {
           set $mom_var $mom_sys_oper_tool_attr_saved_arr($mom_var)
         }
      }
   }
}


#=============================================================================
proc PB_CMD_init_oper_tool_time {} {
#=============================================================================
#  This command will be executed automatically in the "Start of Path" marker
#  to reset the machining time for the operation.
#
#
   global mom_machine_time
   global mom_sys_prev_machine_time

   set mom_sys_prev_machine_time $mom_machine_time
}


#=============================================================================
proc PB_CMD_set_oper_tool_time {} {
#=============================================================================
#  This command will be executed automatically in the "End of Path" marker
#  to set the machining time accumulated on the tool used in the operation.
#
#
   global mom_machine_time
   global mom_tool_name mom_operation_name mom_sys_tool_time
   global mom_sys_prev_machine_time

   if { ![info exists mom_sys_prev_machine_time] } {
      set mom_sys_prev_machine_time 0
   }

   set curr_machine_time [expr $mom_machine_time - $mom_sys_prev_machine_time]
   set mom_sys_prev_machine_time $mom_machine_time

   set mom_sys_tool_time($mom_tool_name,$mom_operation_name) $curr_machine_time
   lappend mom_sys_tool_time($mom_tool_name,oper_list) $mom_operation_name
}



